import{_ as s,c as a,b as e,o as p}from"./app-C9OaS0FJ.js";const l="/assets/image-20250503170807990-DoTSQA6I.png",t="/assets/image-20250503175453721-DkXkJPJD.png",i={};function c(o,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法"><span>基础语法</span></a></h1><h2 id="_1-注释" tabindex="-1"><a class="header-anchor" href="#_1-注释"><span>1.注释</span></a></h2><ul><li>// 单行注释</li><li>/_ 多行注释 _/</li></ul><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line"><span class="token operator">/</span><span class="token operator">/</span> TODO: 将来完成 【可以在vscode里安装一个Todo Tree插件管理代码】</span>
<span class="line"><span class="token operator">/</span><span class="token operator">/</span> NOTE: 请注意</span>
<span class="line"><span class="token operator">/</span><span class="token operator">/</span> Deprecated: 告知已经过期<span class="token punctuation">,</span> 建议不要使用。未来某个版本可能移除</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-分割" tabindex="-1"><a class="header-anchor" href="#_2-分割"><span>2.分割</span></a></h2><blockquote><p>在 Go 语言中把行分隔符作为一条语句的结尾。也就是说,一般情况下,一行结束。</p></blockquote><h2 id="_3-命名规范" tabindex="-1"><a class="header-anchor" href="#_3-命名规范"><span>3.命名规范</span></a></h2><ul><li>标识符采用 CamelCase 驼峰命名法 <ul><li>如果只在包内可用,就采用小驼峰命名</li><li>如果要在包外可见,就采用大驼峰命名</li></ul></li><li>简单循环变量可以使用 i、j、k、v 等</li><li>条件变量、循环变量可以是单个字母或单个单词,Go 倾向于使用单个字母。Go 建议使用更短小。</li><li>常量使用驼峰命名</li><li>函数/方法的参数、返回值应是单个单词或单个字母</li><li>函数可以是多个单词命名,包名应该和导入路径的最后一段路径保持一致</li><li>接口优先采用单个单词命名,一般加 er 后缀。Go 语言推荐尽量定义小接口,接口也可以组合</li></ul><h2 id="_4-关键字" tabindex="-1"><a class="header-anchor" href="#_4-关键字"><span>4.关键字</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">break        default      func         interface    select</span>
<span class="line">case         defer        go           map          struct</span>
<span class="line">chan         else         goto         package      switch</span>
<span class="line">const        fallthrough  if           range        type</span>
<span class="line">continue     for          import       return       var</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-预定义标识符" tabindex="-1"><a class="header-anchor" href="#_5-预定义标识符"><span>5.预定义标识符</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Types:</span>
<span class="line">	any bool byte comparable complex64 complex128 error float32 float64 int int8 int16 int32 int64 rune string uint uint8 uint16 uint32 uint64 uintptr</span>
<span class="line"></span>
<span class="line">Constants:</span>
<span class="line">	true false iota</span>
<span class="line"></span>
<span class="line">Zero value:</span>
<span class="line">	nil</span>
<span class="line"></span>
<span class="line">Functions:</span>
<span class="line">	append cap close complex copy delete imag len make new panic print println real recover</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-标识符" tabindex="-1"><a class="header-anchor" href="#_6-标识符"><span>6.标识符</span></a></h2><ul><li>一个名字,本质上是个字符串,用来指代一个值</li><li>只能是大小写字母、数字、下划线,也可以是 Unicode 字符</li><li>不能以数字开头</li><li>不能是 Go 语言的关键字</li><li>尽量不要使用&quot;预定义标识符&quot;,否则后果难料</li><li>大小写敏感</li></ul><h3 id="_6-1-标识符建议" tabindex="-1"><a class="header-anchor" href="#_6-1-标识符建议"><span>6.1 标识符建议：</span></a></h3><ul><li>不要使用中文</li><li>非必要不要使用拼音</li><li>尽量遵守上面的命名规范，或形成一套行之有效的命名规则</li></ul><h2 id="_7-字面常量" tabindex="-1"><a class="header-anchor" href="#_7-字面常量"><span>7.字面常量</span></a></h2><p>它是值,不是标识符,但本身就是常量,不能被修改</p><p>Go 语言中,boolean、rune、integer、float、complex、string 都是字面常量。其中 rune、integer、float、complex 常量被称为数值常量</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&quot;abc&quot;</span>
<span class="line">&#39;a&#39;</span>
<span class="line">true</span>
<span class="line">1</span>
<span class="line">3.14</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 在go中整数字面量默认是int</span></span>
<span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">13</span> <span class="token comment">// int类型</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>无类型常量的缺省类型为 bool、rune、int、float64、complex128 或字符串</p></blockquote><h2 id="_8-常量" tabindex="-1"><a class="header-anchor" href="#_8-常量"><span>8.常量</span></a></h2><blockquote><p>常量: 使用 const 定义一个标识符,它对应的值不允许修改</p></blockquote><p>对常量并不要求全大写加下划线的命名规则</p><blockquote><p>注意: 常量必须定义时赋值,否则报错</p></blockquote><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">const</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">// 指定类型定义常量并赋值</span></span>
<span class="line"><span class="token comment">// 定义多个常量</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">(</span></span>
<span class="line">  b <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span>  <span class="token comment">// 定义常量,等式左边并未给出类型,将进行类型推导</span></span>
<span class="line">  c <span class="token operator">=</span> <span class="token number">12.3</span></span>
<span class="line">  d <span class="token operator">=</span> <span class="token char">&#39;T&#39;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> e <span class="token comment">// 错误, const定义常量,必须在定义时赋值,并且之后不能改变</span></span>
<span class="line"><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span> <span class="token comment">// 错误, 数组的容器内容会变化,不能在编译期间明确的确定下来, 所以不能使用const，应该使用var</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：Go 语言的常量定义，必须是能在编译器就要完全确定其值，所以，值只能使用字面常量。</p></blockquote><h3 id="_8-1-iota" tabindex="-1"><a class="header-anchor" href="#_8-1-iota"><span>8.1 iota</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 单独写iota都是从0开始</span></span>
<span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// 0</span></span>
<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 批量写iota从0开始, iota是行索引,在第一行不管有几个iota都是0</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">(</span></span>
<span class="line">  SUN <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// 0</span></span>
<span class="line">  MON <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// 1</span></span>
<span class="line">  TUE <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// 2</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 简化</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">(</span></span>
<span class="line">  SUN <span class="token operator">=</span> <span class="token boolean">iota</span></span>
<span class="line">  MON</span>
<span class="line">  TUE</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 批量写iota从0开始,即使第一行没有写iota,iota也从第一行开始,从0开始增加</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">(</span></span>
<span class="line">  a <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// 0</span></span>
<span class="line">  b <span class="token comment">// 1 下一行没有赋值的话,那么会继承自上一行,相当于b = iota 等于1</span></span>
<span class="line">  c <span class="token comment">// 2</span></span>
<span class="line">  <span class="token boolean">_</span> <span class="token comment">// 3</span></span>
<span class="line">  d <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">// 10</span></span>
<span class="line">  e <span class="token comment">// 10</span></span>
<span class="line">  g <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// 6, iota从第一行为0开始算, 每一行加1</span></span>
<span class="line">  h <span class="token comment">// 7</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">(</span></span>
<span class="line">    a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 1 iota批量定义时是行索引,不管几个iota都是0</span></span>
<span class="line">    b <span class="token comment">// 4</span></span>
<span class="line">    c <span class="token comment">// 9</span></span>
<span class="line">    d <span class="token comment">// 16</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-变量赋值" tabindex="-1"><a class="header-anchor" href="#_9-变量赋值"><span>9.变量赋值</span></a></h2><p>变量: 赋值后,可以改变值的标识符。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> n1 <span class="token comment">// 错误, 如果不赋值,编译器无法推测类型</span></span>
<span class="line"><span class="token keyword">var</span> n2 <span class="token builtin">int</span> <span class="token comment">// 正确, 只声明,编译器会自动给n2赋初始值</span></span>
<span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">// 类型推导为int</span></span>
<span class="line"><span class="token keyword">var</span> b<span class="token punctuation">:</span><span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">3.25</span> <span class="token comment">// 直接指定类型</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">5.1</span> <span class="token comment">// 错误, b多次声明</span></span>
<span class="line"><span class="token comment">// 批量变量定义用 var ()</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token punctuation">(</span></span>
<span class="line">  c <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 类型推导</span></span>
<span class="line">  d <span class="token operator">=</span> <span class="token number">123</span></span>
<span class="line">  w <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">333</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 或者</span></span>
<span class="line"><span class="token keyword">var</span> e<span class="token punctuation">,</span> f <span class="token builtin">int</span> <span class="token comment">// 如果要写在一行,必须同类型,只需要在最后指定类型就行</span></span>
<span class="line"><span class="token keyword">var</span> g<span class="token punctuation">,</span> h <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">120</span> <span class="token comment">// 定义同一行并且赋值【必须两个都赋值】</span></span>
<span class="line"><span class="token keyword">var</span> q <span class="token operator">=</span> <span class="token boolean">nil</span> <span class="token comment">// 错误 非法,nil不允许这样用</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 短格式 注意: 短格式不能定义在全局中</span></span>
<span class="line"><span class="token comment">// _ 空白标识符,或称为匿名变量</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    a <span class="token operator">:=</span> <span class="token number">100</span></span>
<span class="line">    b<span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;xyz&quot;</span></span>
<span class="line">    <span class="token comment">// 交换</span></span>
<span class="line">    d <span class="token operator">:=</span> <span class="token number">300</span></span>
<span class="line">    e <span class="token operator">:=</span> <span class="token number">500</span></span>
<span class="line">    e<span class="token punctuation">,</span> d <span class="token operator">=</span> d<span class="token punctuation">,</span> e <span class="token comment">// e: 300 d: 500 可以理解为等号右侧先执行, 那么d指向了300 e指向了500【这里可以理解为照相的快照定格了(拿到了d和e的内存地址, 拷贝了一份)】, 再执行左侧, e指向了300 d指向了500</span></span>
<span class="line">    <span class="token comment">// _ 空白标识符, 只能用于左边, 其他地方不可以用【只是一个占位符】</span></span>
<span class="line">    f<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token punctuation">,</span> h <span class="token operator">:=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span></span>
<span class="line">    u<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> o <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 函数执行后将返回的三个值赋给u, _, o</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-1-下划线" tabindex="-1"><a class="header-anchor" href="#_9-1-下划线"><span>9.1 下划线</span></a></h3><blockquote><p>_下划线是空白标识符</p></blockquote><ul><li>下划线和其他标识符使用方式一样,但它不会分配内存,不占名词空间</li><li>为匿名变量赋值,其值会被抛弃,因此后续代码中不能使用匿名变量的值,也不能使用匿名变量为其他变量赋值</li></ul><h3 id="_9-2-短格式" tabindex="-1"><a class="header-anchor" href="#_9-2-短格式"><span>9.2 短格式</span></a></h3><ul><li>使用:=定义变量并立即初始化</li><li>只能用在函数中,不能用来定义全局变量</li><li>不能提供数据类型,由编译器来推导</li></ul><h3 id="_9-3-零值" tabindex="-1"><a class="header-anchor" href="#_9-3-零值"><span>9.3 零值</span></a></h3><p>变量已经被声明,但是未被显式初始化,这是变量将会被设置为零值。</p><ul><li>int: 0</li><li>float: 0.0</li><li>bool: false</li><li>string: &quot;&quot;</li><li>指针: nil</li></ul><h3 id="_9-4-标识符本质" tabindex="-1"><a class="header-anchor" href="#_9-4-标识符本质"><span>9.4 标识符本质</span></a></h3><p>每一个标识符对应一个具有数据结构的值,但是这个值不方便直接访问,程序员就可以通过其对应的标识符来访问数据,标识符就是一个指代。</p><ul><li>标识符源代码时候,用来指代某个值的。编译后还有变量、常量标识符码? <ul><li>答: 没有了,因为数据在内存中,内存访问靠什么? <strong>地址</strong>,标识符编译后就没有了换成了地址</li></ul></li><li>编译会生成二进制可执行文件并执行,在内存中开启进程,进程内有你定义的数据</li></ul><h2 id="_10-变量可见性" tabindex="-1"><a class="header-anchor" href="#_10-变量可见性"><span>10.变量可见性</span></a></h2><h3 id="_10-1-包级标识符" tabindex="-1"><a class="header-anchor" href="#_10-1-包级标识符"><span>10.1 包级标识符</span></a></h3><p>在 Go 语言中,在.go 文件中的顶层代码中,定义的标识符称为包级标识符。如果首字母大写,可在包外包内可见。如果首字母小写,则包内可见。</p><blockquote><p>同一个目录就是同一个包,同一个目录里面只能有一个包</p></blockquote><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 例如: 在ch1文件夹下有main.go 和 a.go, 那么它们俩文件内部只能定义同一个package 包名</span></span>
<span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span> <span class="token comment">// 导入包或第三方包</span></span>
<span class="line"><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span> <span class="token comment">// 顶层代码, 包内的全局变量， 包内可见</span></span>
<span class="line"><span class="token keyword">var</span> E <span class="token operator">=</span> <span class="token string">&quot;xyz&quot;</span> <span class="token comment">// 包内全局可见, 包外也可以; 可以导出,可以外漏到包外</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// main函数叫做入口函数,go约定main函数必须在main包中定义</span></span>
<span class="line">    <span class="token comment">// Println 包外可见</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用建议</strong></p><ul><li>顶层代码中定义包级标识符 <ul><li>首字母大写作为包导出标识符,首字母小写作为包内可见标识符</li><li>const 定义包级常量,必须在声明时初始化</li><li>var 定义包级变量 <ul><li>可以指定类型,也可以使用无类型常量定义</li><li>延迟赋值必须指定类型,不然无法确定零值</li></ul></li></ul></li><li>有相关关系的,可以批量定义在一起</li><li>一般声明时,还是考虑&quot;就近原则&quot;,尽量靠近第一次使用的地方声明</li><li>不能使用短格式定义</li></ul><h3 id="_10-2-局部标识符" tabindex="-1"><a class="header-anchor" href="#_10-2-局部标识符"><span>10.2 局部标识符</span></a></h3><p>定义在函数中,包括 main 函数,这些标识符就是局部标识符</p><p>使用建议</p><ul><li>在函数中定义的标识符</li><li>const 定义局部常量</li><li>var 定义局部变量 <ul><li>可以指定类型,也可以使用无类型常量定义</li><li>延迟赋值必须指定类型,不然无法确定零值</li></ul></li><li>有相关关系的,可以批量定义在一起</li><li>在函数内,直接赋值的变量多采用短格式定义</li></ul><h2 id="_11-类型" tabindex="-1"><a class="header-anchor" href="#_11-类型"><span>11.类型</span></a></h2><h3 id="_11-1-布尔型" tabindex="-1"><a class="header-anchor" href="#_11-1-布尔型"><span>11.1 布尔型</span></a></h3><p>类型 bool,定义了 2 个预定义常量,分别是 true、false</p><h3 id="_11-2-数值型" tabindex="-1"><a class="header-anchor" href="#_11-2-数值型"><span>11.2 数值型</span></a></h3><p>复数: complex64、complex128</p><h4 id="_11-2-1-整数" tabindex="-1"><a class="header-anchor" href="#_11-2-1-整数"><span>11.2.1 整数</span></a></h4><ul><li>长度不同【有符号】: int8、int16(C 语言 short)、int32、int64(C 语言 long) <ul><li>最高位是符号位</li><li>rune 类型本质上就是 int32; type rune = int32 类型 别名 type 定义时使用了 =,</li></ul></li><li>长度不同无符号【有符号】: uint8、uint16、uint32、uint64 <ul><li>u 即 unsigned,最高位不是符号位</li><li>byte 类型,它是 uint8 的别名</li></ul></li><li>自动匹配平台: int、uint <ul><li>int 类型它至少占用 32 位,但一定注意它不等同于 int32,不是 int32 的别名。要看 CPU,32 位就是 4 字节,64 位就是 8 字节。但是,也不是说 int 是 8 字节 64 位,就等同于 int64,它们依然是不同类型</li></ul></li></ul><p><strong>扩展知识</strong></p><p>计算机内部是使用二进制的，也就是只有 0 和 1，那如何表达出正负数的区别呢？（为了让初学者便于理 解，不引入补码表示法） 为了方便以单字节为例，1 个字节是 8 位，那么可以表示 256 种状态。 如何表示十进制 2 呢？它是 00000010。那十进制-2，如何表示？ 那就把最高位单独解释，最高位定为符号位，0 表示正号，1 表示负号。-2 用二进制表示为 10000010</p><p><strong>进制表示</strong></p><ul><li>十六进制: 0x10、0X10</li><li>八进制： 0o10、0O10</li><li>二进制: 0b10、0B10</li></ul><blockquote><p>与其他语言不同,即使同是整型这个大类中,在 Go 中,也不能跨类型计算。如有必要,请强制类型转换。</p><p>强制类型转换: 把一个值从一个类型强制转换到另一种类型,有可能转换失败。</p></blockquote><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 强制类型转换又称显式类型转换</span></span>
<span class="line">a <span class="token operator">:=</span> <span class="token number">10</span> <span class="token comment">// 默认是int类型</span></span>
<span class="line"><span class="token keyword">var</span> b <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">300</span></span>
<span class="line"><span class="token keyword">var</span> c <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> b</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 十进制 2</span></span>
<span class="line"><span class="token comment">// 第一位表示符号 0为正 1为负</span></span>
<span class="line"><span class="token number">0</span>	<span class="token number">000</span> <span class="token number">0010</span></span>
<span class="line"><span class="token comment">// 十进制 -2  【补码】符号位不动,其余位按位取反,最后加1</span></span>
<span class="line"><span class="token number">1</span>   <span class="token number">000</span> <span class="token number">0010</span></span>
<span class="line"><span class="token comment">// 因为-2要补码, 下面是结果</span></span>
<span class="line"><span class="token number">1</span>   <span class="token number">111</span> <span class="token number">1101</span>  <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line"><span class="token comment">// =&gt;</span></span>
<span class="line"><span class="token number">1</span>   <span class="token number">111</span> <span class="token number">1110</span></span>
<span class="line"><span class="token comment">// 上面为啥要补码, 因为为了把减法当作加法做</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 扩展知识</span></span>
<span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line">    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">200</span></span>
<span class="line">    <span class="token comment">// Printf 向控制台打印, f是format %T是占位符,%T表示type,取值的类型</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T %T %T\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// %d 占位符 digital 数值形式,往往用于整数</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printfln</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// %s 占位符 string类型的值; %q 占位符 带字符串类型引号的%s  q表示 quote引号的意思</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printfln</span><span class="token punctuation">(</span><span class="token string">&quot;%s %q&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2 &quot;2&quot; string(整数值看作是ASCII或UniCode码)</span></span>
<span class="line">    <span class="token keyword">var</span> m <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">50</span></span>
<span class="line">    <span class="token comment">// [2] =&gt; string(m), [1] =&gt; rune(m)</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printfln</span><span class="token punctuation">(</span><span class="token string">&quot;%[2]T %[1]d&quot;</span><span class="token punctuation">,</span> <span class="token function">rune</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 值从1开始编 rune(m)表示索引1, string(m)表示索引2</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printfln</span><span class="token punctuation">(</span><span class="token string">&quot;%d, %[1]d, %d&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token comment">// 输出 100 100 200 因为第三个%d没有指定索引,所以将第二个索引+1</span></span>
<span class="line">    <span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token char">&#39;测&#39;</span> <span class="token comment">// rune 类型 本质是int32</span></span>
<span class="line">    <span class="token comment">// %c 占位符 character 字符输出</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T %d %c&quot;</span><span class="token punctuation">,</span> a1<span class="token punctuation">)</span> <span class="token comment">// 内存中一个数据,看你赋予它什么类型,就可以看到不同的东西</span></span>
<span class="line">    a1 <span class="token operator">=</span> <span class="token char">&#39;c&#39;</span> <span class="token comment">// 重新赋值,类型不变</span></span>
<span class="line">    a <span class="token operator">=</span> <span class="token number">0x63</span> <span class="token comment">// 重新赋值, 0x63是整数标识符  0x63是字面常量,默认是int类型, 隐式类型转换</span></span>
<span class="line">    <span class="token comment">// 相当于 a = (int32)0x63</span></span>
<span class="line">    a <span class="token operator">=</span> <span class="token char">&#39;\\x63&#39;</span> <span class="token comment">// \\x是指16进制字符表示法</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> aa <span class="token operator">=</span> <span class="token char">&#39;测&#39;</span> <span class="token comment">// rune类型 unicode编码</span></span>
<span class="line">    <span class="token keyword">var</span> bb <span class="token operator">=</span> <span class="token string">&quot;测&quot;</span> <span class="token comment">// string类型 utf-8类型,内存中使用utf-8编码保存字符串的字符</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> myint <span class="token builtin">int32</span> <span class="token comment">// 特别注意这里没有等号=, 这不是别名,它是新类型,新和旧类型不是同一个类型【本质上是一样,但是定义的数据不能直接通用】</span></span>
<span class="line"><span class="token keyword">type</span> myint64 <span class="token operator">=</span> <span class="token builtin">int64</span> <span class="token comment">// 类型别名</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以认为 go 中没有字符类型,本质上是 int32 的别名,习惯上称 rune 为字符类型</p><p>在 go 中隐式类型转换,只限于 untyped constant 无类型字面量</p></blockquote><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 字符</span></span>
<span class="line"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token char">&#39;测&#39;</span> <span class="token comment">// 字符类型 unicode码, 本质上rune(int32) 用了2个字节就行了,但是s本身就得用4个字节</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_11-2-2-浮点数" tabindex="-1"><a class="header-anchor" href="#_11-2-2-浮点数"><span>11.2.2 浮点数</span></a></h4><ul><li>float32: 最大范围约为 3.4e38, 通过 math.MaxFloat32 查看</li><li>float64: 最大范围约为 1.8e308, 通过 math.MaxFloat64 查看</li><li>打印格式化符常用%f</li></ul><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1000.2486</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment">// %f占位符 浮点数输出</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2f\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment">// 保留两位小数输出</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%10f\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment">// 打印宽度为10【a的长度为9, 前面会空出一个空格来】, 默认右对齐</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%10.2f\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment">// 打印宽度为10,保留2位小数</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%-10.1f】\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment">// 打印宽度为10,保留1位小数,左对齐</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T, %.2[1]f&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment">// 打印a的类型, 保留2位小数 右对齐</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_11-2-3-进制及转换" tabindex="-1"><a class="header-anchor" href="#_11-2-3-进制及转换"><span>11.2.3 进制及转换</span></a></h4><p>常见进制有二进制、八进制、十进制、十六进制。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 每8位(bit)位1个字节(byte)</span></span>
<span class="line"><span class="token comment">// 一个字节能够表示的整数的范围:</span></span>
<span class="line"><span class="token comment">// 无符号数: 0 ~ 0xFF, 即0到255, 256种状态</span></span>
<span class="line"><span class="token comment">// 有符号数: 依然是256种状态, 去掉最高位还剩7位,能够描述的最大正整数为127,那么负数最大就为-128。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二进制转八进制、十六进制</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 0b1110 计算为 1 * 2^3 + 1 * 2^2 + 1 * 2^1 + 0 * 2^0 = 14</span></span>
<span class="line"><span class="token comment">// 0o664 计算为 6 * 8^2 + 6 * 8^1 + 4 * 8^0 = 436</span></span>
<span class="line"><span class="token comment">// 0x41 计算为 4 * 16^1 + 1 * 16^0 = 65</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 这里利用 8421法来方便计算</span></span>
<span class="line"><span class="token comment">// 二进制转十六进制, 二进制每4位断开转换</span></span>
<span class="line"><span class="token comment">// 0b1111 1001 =&gt; 0bF9    相当于  1111 =&gt; 8 + 4 + 2 + 1 =&gt; F; 1001 =&gt; 8 + 0 + 0 + 1 =&gt; 9</span></span>
<span class="line"><span class="token comment">// 二进制转八进制, 二进制每3位断开转换</span></span>
<span class="line"><span class="token comment">// 0b11 111 001 =&gt; 0o371 相当于 11 =&gt; 2 + 1 =&gt; 3; 111 =&gt; 4 + 2 + 1 =&gt; 7; 001 =&gt; 0 + 0 + 1 =&gt; 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>八进制、十六进制转二进制</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 八进制转二进制</span></span>
<span class="line"><span class="token comment">// 0o664 =&gt; 0b110 110 100</span></span>
<span class="line"><span class="token comment">// 十六进制转二进制</span></span>
<span class="line"><span class="token comment">// 0xF8 =&gt; 0b1111 1000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>十进制转二进制、十六进制</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 十进制转二进制</span></span>
<span class="line"><span class="token comment">// 127除以基数2,直到商为0为止,反向提取余数</span></span>
<span class="line"><span class="token comment">// 十进制转十六进制</span></span>
<span class="line"><span class="token comment">// 127除以基数16,直到商为0为止,反向提取余数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_11-2-4-转移字符" tabindex="-1"><a class="header-anchor" href="#_11-2-4-转移字符"><span>11.2.4 转移字符</span></a></h4><p>每一个都是一个字符,rune 类型。可以作为单独字符使用。也可以作为字符串中的一个字符</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"> \\a   U<span class="token operator">+</span><span class="token number">0007</span> alert or bell</span>
<span class="line"> \\b   U<span class="token operator">+</span><span class="token number">0008</span> backspace</span>
<span class="line"> \\f   U<span class="token operator">+</span>000C form feed</span>
<span class="line"> \\n   U<span class="token operator">+</span>000A line feed or newline</span>
<span class="line"> \\r   U<span class="token operator">+</span>000D carriage <span class="token keyword">return</span></span>
<span class="line"> \\t   U<span class="token operator">+</span><span class="token number">0009</span> horizontal tab</span>
<span class="line"> \\v   U<span class="token operator">+</span>000B vertical tab</span>
<span class="line"> \\\\   U<span class="token operator">+</span>005C backslash</span>
<span class="line"> \\&#39;   U<span class="token operator">+</span><span class="token number">0027</span> single quote  <span class="token punctuation">(</span>valid escape only within <span class="token builtin">rune</span> literals<span class="token punctuation">)</span></span>
<span class="line"> \\&quot;   U<span class="token operator">+</span><span class="token number">0022</span> double quote  <span class="token punctuation">(</span>valid escape only within <span class="token builtin">string</span> literals<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单引号留给表示字符,字面量表达,本质上是 int32(rune)或 byte(uint8)</p><h3 id="_11-3-字符串" tabindex="-1"><a class="header-anchor" href="#_11-3-字符串"><span>11.3 字符串</span></a></h3><p>使用双引号或反引号引起来的任意个字符,它是字面常量。</p><blockquote><p>注意: 在反引号\`\`中使用\\t 等转义字符失效</p></blockquote><blockquote><p>用途: 一般用于多行书写, 结构体 tag 使用</p></blockquote><p>字符串或字符中,占用的字节数(内存占用或磁盘占用),显示中在不同的显示设备中展示的显示宽度</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">a <span class="token operator">:=</span> <span class="token string">\`a	b</span>
<span class="line">c\`</span></span>
<span class="line"><span class="token comment">// 下面等同于上面,转移字符在反引号中失效【反引号不支持转义字符】</span></span>
<span class="line">b <span class="token operator">:=</span><span class="token string">&quot;a\\tb\\nc&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_11-3-1-字符串格式化" tabindex="-1"><a class="header-anchor" href="#_11-3-1-字符串格式化"><span>11.3.1 字符串格式化</span></a></h4><blockquote><p>格式符参考 fmt 包帮助 https://pkg.go.dev/fmt</p></blockquote><ul><li>%v 适合所有类型数据,调用数据的缺省打印格式 <ul><li>%v 对于结构体,会多打印出字段名</li></ul></li><li>%#v 对于结构体,有更加详细的输出</li><li>%T 打印值的类型</li><li>%% 打印百分号本身</li></ul><h5 id="_11-3-1-1-整数" tabindex="-1"><a class="header-anchor" href="#_11-3-1-1-整数"><span>11.3.1.1 整数</span></a></h5><ul><li>%b 二进制; %o 八进制; %O 八进制带 0o 前缀;%x 十六进制小写;%X 十六进制大写</li><li>%U 把一个整数用 Unicode 格式打印。 <ul><li>例如: fmt.Printf(&quot;%U, %x, %c\\n&quot;, 27979, 27979, 27979) =&gt; U+6D4B, 6d4b, 测</li></ul></li><li>%c 把 rune、byte 的整型值用字符形式打印</li><li>%q 把一个整型当作 Unicode 字符输出,类似%c,不过在字符外面多了单引号。q 的意思是 quote</li></ul><h5 id="_11-3-1-2-浮点数" tabindex="-1"><a class="header-anchor" href="#_11-3-1-2-浮点数"><span>11.3.1.2 浮点数</span></a></h5><ul><li>%e、%E 科学计数法</li><li>%f、%F 小鼠表示法, 最常用</li><li>%g 内部选择使用%e 还是%f 以简洁输出;%G 选择%E 或%F</li></ul><h5 id="_11-3-1-3-字符串或字节切片" tabindex="-1"><a class="header-anchor" href="#_11-3-1-3-字符串或字节切片"><span>11.3.1.3 字符串或字节切片</span></a></h5><ul><li>%s 字符串输出,如果是 rune 切片,需要 string 强制类型转换</li><li>%q 类似%s,外部加上双引号。q 的意思就是 quote</li></ul><h4 id="_11-3-1-4-指针" tabindex="-1"><a class="header-anchor" href="#_11-3-1-4-指针"><span>11.3.1.4 指针</span></a></h4><ul><li>%p 十六进制地址</li></ul><table><thead><tr><th>类型</th><th>说明</th><th>缺省格式符</th><th>常用格式符</th></tr></thead><tbody><tr><td>bool</td><td>布尔型</td><td>%t</td><td>%t</td></tr><tr><td>int/int8/int16/int32/int64</td><td>整型</td><td>%d</td><td>%d、%b、%x</td></tr><tr><td>uint/uint8/uint16/uint32/uint64</td><td>无符号整型</td><td>%d,如果使用%#v 就等同%#x</td><td>%d、%b、%x</td></tr><tr><td>float32/float64</td><td>浮点型</td><td>%g</td><td>%f、%e</td></tr><tr><td>complex64/complex128</td><td>复数</td><td>%g</td><td></td></tr><tr><td>byte</td><td>字节型</td><td>%c</td><td>%c、%d</td></tr><tr><td>rune</td><td>字符型</td><td>%c</td><td>%c、%d</td></tr><tr><td>uintptr</td><td>指针</td><td>%p</td><td>%p</td></tr><tr><td>string/[]byte</td><td>字符串</td><td>%s</td><td>%s</td></tr><tr><td>map slice channel error</td><td>引用</td><td>%v</td><td></td></tr><tr><td>slice</td><td>索引 0 元素</td><td>%p</td><td></td></tr></tbody></table><h4 id="_11-3-1-5-特殊格式符写法" tabindex="-1"><a class="header-anchor" href="#_11-3-1-5-特殊格式符写法"><span>11.3.1.5 特殊格式符写法</span></a></h4><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">:=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d, %[2]v, %[1]d, %d&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以认为中括号内写的是索引，是 Printf 的索引，索引 0 是格式字符串本身，1 开始才是参数。如果写了 [n]，之后默认就是 n+1</p><h4 id="_11-3-1-6-输出函数" tabindex="-1"><a class="header-anchor" href="#_11-3-1-6-输出函数"><span>11.3.1.6 输出函数</span></a></h4><p>输出到标准输出</p><ul><li>Print：使用缺省格式输出,空格分隔</li><li>Println: 使用缺省格式输出,空格分隔,最后追加换行</li><li>Printf: 按照指定的格式符输出</li></ul><p>输出到字符串,经常用来拼接字符串用</p><ul><li>Sprint: 相当于 Print,不过输出为 string, 返回值为 string</li><li>Sprintln: 相当于 Println, 不过输出为 string</li><li>Sprintf: 相当于 Printf, 不过输出为 string</li></ul><h2 id="_12-操作符" tabindex="-1"><a class="header-anchor" href="#_12-操作符"><span>12.操作符</span></a></h2><p>参考 https://golang.google.cn/ref/spec#Operators_and_punctuation</p><h3 id="_12-1-逻辑运算真值表" tabindex="-1"><a class="header-anchor" href="#_12-1-逻辑运算真值表"><span>12.1 逻辑运算真值表</span></a></h3><p><img src="`+l+`" alt="image-20250503170807990"></p><h3 id="_12-2-算术运算符" tabindex="-1"><a class="header-anchor" href="#_12-2-算术运算符"><span>12.2 算术运算符</span></a></h3><p>+、-、*、/、%、++、--</p><ul><li>5/2、 -5/2</li><li>+、-还可以当作正负用,就不是算术运算符了,例如-s</li><li>类 C 语言语法没有 Python</li></ul><p>++、--只能是 i++、i--，且是语句,不是表达式。也就是说,语句不能放到等式、函数参数等地方。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">a <span class="token operator">:=</span> <span class="token number">10</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 错误, ++、--不能用于参数中</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意: 没有++i、--i</p></blockquote><h3 id="_12-3-常量计算问题" tabindex="-1"><a class="header-anchor" href="#_12-3-常量计算问题"><span>12.3 常量计算问题</span></a></h3><p>常量分类 typed 类型化常量和 untyped 常量</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">var</span> b <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">2.3</span></span>
<span class="line"><span class="token comment">// fmt.Println(a * b) // 错误, int和float32类型不同,无法计算,除非强制类型转换</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">float32</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// int</span></span>
<span class="line"><span class="token keyword">var</span> b1 <span class="token operator">=</span> <span class="token number">2.3</span> <span class="token comment">// float64</span></span>
<span class="line"><span class="token comment">// fmt.Println(a * b) // 错误, int和float64类型不同,无法计算,除非强制类型转换</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 等号右边都是无类型字面常量,它会在上下文中进行隐式类型转换,Go为了方便,不增加程序员转换类型的负担,在无类型常量上做了一些贴心操作</span></span>
<span class="line"><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2.3</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"> An untyped constant has a default type which is the type to which the</span>
<span class="line">constant is implicitly converted in contexts where a typed value is required,</span>
<span class="line">for instance, in a short variable declaration such as i := 0 where there is</span>
<span class="line">no explicit type.</span>
<span class="line">摘自 https://golang.google.cn/ref/spec#Constants</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-4-位运算符" tabindex="-1"><a class="header-anchor" href="#_12-4-位运算符"><span>12.4 位运算符</span></a></h3><p>&amp;位与、|位或、^异或、&amp;^位清空、&lt;&lt;、&gt;&gt;</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// &amp;位与</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">0b1100</span> <span class="token operator">&amp;</span> <span class="token number">0b1010</span><span class="token punctuation">)</span> <span class="token comment">// 可以将&amp;位与理解成乘法, 最终1010</span></span>
<span class="line"><span class="token comment">// |位或</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">0b1100</span> <span class="token operator">|</span> <span class="token number">0b0101</span><span class="token punctuation">)</span> <span class="token comment">// 可以将|位或理解成加法, 0b1100 + 0b0101, 真 + 假 =&gt; 真; 真 + 真 =&gt; 真; 假 + 假 =&gt; 假</span></span>
<span class="line"><span class="token comment">// &amp;^位清空</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">0b1100</span> <span class="token operator">&amp;^</span> <span class="token number">0b1010</span><span class="token punctuation">)</span> <span class="token comment">// 可以理解为先将0b1010取反 =&gt; 0b0101,再与0b1010做&amp;位与 =&gt; 0b0000</span></span>
<span class="line"><span class="token comment">// ^异或 【不同为1相同为0】</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">0b1100</span> <span class="token operator">^</span> <span class="token number">0b0101</span><span class="token punctuation">)</span> <span class="token comment">// 0b1001</span></span>
<span class="line"><span class="token comment">// 左移 &lt;&lt;</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">0b0101</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 相当于0b0101 乘以2^2 或者 0b0101 向左移2位, 0b0001 0100</span></span>
<span class="line"><span class="token comment">// 右移</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">0b0001</span> <span class="token number">0100</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 相当于0b0001 0100 除以2^1 或者0b0001 0100向右移动1位, 0b0000 1010</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>x&amp;y ，位与本质就是按照 y 有 1 的位把 x 对应位的值保留下来。</li><li>x&amp;^y，位清空本质就是先把 y 按位取反后的值，再和 x 位与，也就是 y 有 1 的位的值不能保留，被清空，原 来是 0 的位被保留。换句话说，就是按照 y 有 1 的位清空 x 对应位。</li></ul><h3 id="_12-5-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_12-5-赋值运算符"><span>12.5 赋值运算符</span></a></h3><blockquote><p>=、+=、-=、*=、/=、%=、&gt;&gt;=、&lt;&lt;=、&amp;=、&amp;^=、^=、|=</p></blockquote><blockquote><p>:= 短格式赋值</p></blockquote><h3 id="_12-6-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_12-6-逻辑运算符"><span>12.6 逻辑运算符</span></a></h3><blockquote><p>&amp;&amp;、||、!</p></blockquote><p>由于 Go 语言对类型的要求,逻辑运算符操作的只能是 bool 类型数据,那么结果也只能是 bool 型</p><h3 id="_12-7-三元运算符【注意】" tabindex="-1"><a class="header-anchor" href="#_12-7-三元运算符【注意】"><span>12.7 三元运算符【注意】</span></a></h3><blockquote><p>注意: 在 Go 中没有三元运算符</p></blockquote><h3 id="_12-8-指针" tabindex="-1"><a class="header-anchor" href="#_12-8-指针"><span>12.8 指针</span></a></h3><p>数据是放在内存中,内存是线性编址的。任何数据在内存中都可以通过一个地址来找到它。</p><blockquote><p>通过&amp;取地址</p><p>*指针变量,表示通过指针取值</p></blockquote><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">a <span class="token operator">:=</span> <span class="token number">123</span></span>
<span class="line">b <span class="token operator">:=</span> <span class="token operator">&amp;</span>a <span class="token comment">// &amp;取地址操作符, 获取a标识符所指向123的内存地址</span></span>
<span class="line">c <span class="token operator">:=</span> <span class="token operator">*</span>b <span class="token comment">// 取b的内存地址所存储的值【这里可以理解为C#的拷贝副本, 栈拷贝】, c的地址与b的地址不一致,因为c对b进行了拷贝副本</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d, %p %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>标识符的本质是指向编译后被翻译成内存地址</p><p>是一种类型的值,本质上是一个大整数(16 进制数), 可以理解为这个整数就是内存中门牌号码</p><p>*int 指向 int 类型数据的指针</p></blockquote><h3 id="_12-9-优先级" tabindex="-1"><a class="header-anchor" href="#_12-9-优先级"><span>12.9 优先级</span></a></h3><p><img src="`+t+`" alt="image-20250503175453721"></p><h2 id="_13-程序控制" tabindex="-1"><a class="header-anchor" href="#_13-程序控制"><span>13.程序控制</span></a></h2><ul><li>顺序 <ul><li>按照顺序自上向下一条条执行</li></ul></li><li>分支 <ul><li>根据不同的情况判断,条件满足执行某条件下的语句</li></ul></li><li>循环 <ul><li>条件满足就反复执行,不满足就不执行或不再执行</li></ul></li></ul><h3 id="_13-1-if-语句" tabindex="-1"><a class="header-anchor" href="#_13-1-if-语句"><span>13.1 if 语句</span></a></h3><h4 id="_13-1-1-单分支" tabindex="-1"><a class="header-anchor" href="#_13-1-1-单分支"><span>13.1.1 单分支</span></a></h4><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> condition <span class="token punctuation">{</span></span>
<span class="line">    代码块</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意: Go 语言中,花括号一定要跟着 if、for、func 等行的最后,否则语法出错。【if、for、func 要与&quot;{&quot;同一行】</p><ul><li>condition 必须是一个 bool 类型,在 Go 中,不能使用其他类型等效为布尔值。</li><li>语句块中可以写其他代码</li><li>如果 condition 为 true,才能执行其后代码块</li></ul><h4 id="_13-1-2-多分支" tabindex="-1"><a class="header-anchor" href="#_13-1-2-多分支"><span>13.1.2 多分支</span></a></h4><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> condition1 <span class="token punctuation">{</span></span>
<span class="line">    代码块<span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> condition2 <span class="token punctuation">{</span></span>
<span class="line">    代码块<span class="token number">2</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> condition3 <span class="token punctuation">{</span></span>
<span class="line">    代码块<span class="token number">3</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    代码块</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>多分支结构,从上向下依次判断分支条件,只要一个分支条件成立,其后语句块将被执行,那么其他条件都不会被执行</li><li>前一个分支条件被测试通过,下一个条件相当于隐含着这个条件</li><li>一定要考虑一下 else 分支是有必要写,以防逻辑漏洞</li></ul><h4 id="_13-1-3-特殊-if" tabindex="-1"><a class="header-anchor" href="#_13-1-3-特殊-if"><span>13.1.3 特殊 if</span></a></h4><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> score<span class="token punctuation">,</span> line <span class="token operator">:=</span> <span class="token number">99</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">;</span>score <span class="token operator">&gt;</span> line <span class="token punctuation">{</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;perfect&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;good&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意: 这种写法中定义的变量作用域只能是当前 if 或 switch</p></blockquote><h3 id="_13-2-switch-语句" tabindex="-1"><a class="header-anchor" href="#_13-2-switch-语句"><span>13.2 switch 语句</span></a></h3><blockquote><p>Go 语言的 switch 有别于 C 语言的 switch,case 是独立代码块,不能穿透</p></blockquote><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">a <span class="token operator">:=</span> <span class="token number">20</span></span>
<span class="line"><span class="token keyword">switch</span> a <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">    	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">20</span><span class="token punctuation">:</span></span>
<span class="line">    	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Other&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码相当于下面的代码</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">switch</span> a<span class="token operator">:=</span><span class="token number">20</span><span class="token punctuation">;</span> a <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">    	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">20</span><span class="token punctuation">:</span></span>
<span class="line">    	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Other&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Go 语言没有穿透。如果想在 Go 语言中实现穿透效果,使用 fallthrough 穿透当前 case 语句块。如非必要,不要使用 fallthrough</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">switch</span> a <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">;</span> a <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">:</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">:</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">fallthrough</span> <span class="token comment">// 使用fallthrough实现穿透</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">:</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">c <span class="token operator">:=</span> <span class="token number">5</span></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">{</span> <span class="token comment">// 没有待比较变量,意味着表达式是true,是布尔型</span></span>
<span class="line">    <span class="token keyword">case</span> c <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;c大于0&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;c等于0&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;c小于0&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 也可以写成下面</span></span>
<span class="line"><span class="token keyword">switch</span> a<span class="token operator">:=</span><span class="token number">20</span><span class="token punctuation">;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> a <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;c大于0&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;c等于0&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;c小于0&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-3-for-循环" tabindex="-1"><a class="header-anchor" href="#_13-3-for-循环"><span>13.3 for 循环</span></a></h3><blockquote><p>注意: Go 语言没有提供 while 关键字,可以用 for 方便的替代</p></blockquote><p>C 风格 for</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">[</span>初始操作<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span>循环条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span>循环后操作<span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    循环体</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>初始操作: 第一次进入循环前执行,语句只能执行一次,之后不再执行</li><li>循环条件: 要求返回布尔值,每次进入循环体前进行判断。如果每次条件满足返回 true,就进入循环执行一次循环体;否则循环结束</li><li>循环后操作: 每次循环体执行完,在执行下一次循环条件判断之前,执行该操作一次</li></ul><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 初始操作中的短格式定义的i的作用域只能在for中</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 死循环</span></span>
<span class="line"><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">{</span> <span class="token comment">// i一直为5</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">5</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">{</span> <span class="token comment">// 循环条件一直为true【中间不写一直为true】</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> i<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// for condition {}, condition就是循环条件</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 死循环相当于for true {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_13-3-1-continue" tabindex="-1"><a class="header-anchor" href="#_13-3-1-continue"><span>13.3.1 continue</span></a></h4><blockquote><p>终止当前这一趟循环体的执行,直接执行&quot;循环后操作&quot;后,进入下一趟循环的条件判断</p></blockquote><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">continue</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-3-1-break" tabindex="-1"><a class="header-anchor" href="#_13-3-1-break"><span>13.3.1 break</span></a></h3><blockquote><p>终止当前循环的执行,结束了</p></blockquote><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">5</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">break</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>除了 break,函数的 return 结束函数执行,当然也能把函数中的循环打断</p></blockquote><h3 id="_13-4-goto-和-label" tabindex="-1"><a class="header-anchor" href="#_13-4-goto-和-label"><span>13.4 goto 和 label</span></a></h3><p>goto 它会破坏结构化编程,但可以做到便利的无条件跳转</p><ul><li>跳出多重循环使用,但是问题是为什么要用多重循环?</li><li>到同一处标签统一处理,例如统一错误处理,问题是,写个函数也可以实现</li></ul><blockquote><p>goto 有时候也能简化一些代码,但是它是双刃剑,<strong>不要轻易使用</strong></p></blockquote><p>goto 需要配合标签 label 使用,label 就像代码中的锚点,goto 将无条件跳到那里开始向执行代码</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">continue</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> i<span class="token operator">&gt;</span><span class="token number">10</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">goto</span> condition</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">condition<span class="token punctuation">:</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;done&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>continue、break 也可以指定 label,方便某些循环使用。但是,建议不要这些写,弄不好就成了毛线团</p><h3 id="_13-5-for-range" tabindex="-1"><a class="header-anchor" href="#_13-5-for-range"><span>13.5 for range</span></a></h3><table><thead><tr><th>类型</th><th>变量</th><th>Range expression</th><th>第一个值</th><th>第二个值</th></tr></thead><tbody><tr><td>array or slice</td><td>a</td><td>[n]E, *[n]E []E</td><td>index i int</td><td>a[i] E</td></tr><tr><td>string</td><td>s</td><td>&quot;abcd&quot;</td><td>index i int utf-8 字节偏移</td><td>unicode 值 rune</td></tr><tr><td>map</td><td>m</td><td>map[K]V</td><td>key k K</td><td>m[k] V</td></tr></tbody></table><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">a <span class="token operator">:=</span> <span class="token string">&quot;abc测试&quot;</span></span>
<span class="line"><span class="token comment">// i字节索引 ASCII 1个字节 字符串中汉字用得是utf-8编码 3个字节</span></span>
<span class="line"><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span> <span class="token comment">// for range 很智能, 将汉字从utf-8 转为 unicode</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token comment">// a、b、c 对应的字节索引是0,1,2, 测:3,但是汉字占用3个字节,那么试从索引6开始到9</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T %[1]v %[1]c\\n&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">运行结果如下</span>
<span class="line"><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0x61</span></span>
<span class="line"><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0x62</span></span>
<span class="line"><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token number">0x63</span></span>
<span class="line"><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token number">0x64</span></span>
<span class="line"><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">27979</span><span class="token punctuation">,</span> 测<span class="token punctuation">,</span> <span class="token number">0x6d4b</span></span>
<span class="line"><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">35797</span><span class="token punctuation">,</span> 试<span class="token punctuation">,</span> <span class="token number">0x8bd5</span></span>
<span class="line">测试</span>
<span class="line">索引就是字节偏移量，从索引可以看出，中文在字符串中是utf<span class="token operator">-</span><span class="token number">8</span>编码，占<span class="token number">3</span>个字节。</span>
<span class="line">但是<span class="token keyword">for</span> <span class="token keyword">range</span>读取字符串返回的是一个个字符（整数），而字符是ASCII或UNICODE对应的编码值。</span>
<span class="line"><span class="token operator">%</span>d 打印的是unicode值</span>
<span class="line"><span class="token operator">%</span>c 打印的是字符</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-随机数" tabindex="-1"><a class="header-anchor" href="#_14-随机数"><span>14.随机数</span></a></h2><blockquote><p>标准库: math/rand</p></blockquote><p>我们使用的是伪随机数，是内部写好的公式计算出来的。这个公式运行提供一个种子，有这个种子作为 起始值开始计算。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">src <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 使用种子100创建一个随机数源 rand.New(rand.NewSource(time.Now().UnixNano())) // 利用当前时间的纳秒值做种子</span></span>
<span class="line">r10 <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token comment">// 使用源创建随机数生成器 r10.Intn(5)，返回[0, 5)的随机整数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 1.20 之前生成随机数</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">  <span class="token string">&quot;math/rand&quot;</span></span>
<span class="line">  <span class="token string">&quot;time&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line">src <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">r <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 生成一个[0,10)随机数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 1.20 之后生成随机数</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">  <span class="token string">&quot;math/rand&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全局随机数生成器 globalRand 它的种子默认为 1</p><p>var globalRand = New(&amp;lockedSource{src: NewSource(1). (*rngSource)})</p><p>如果要改变 globalRand 的种子，就需要使用 rand.Seed(2)修改种子 rand.Intn(5)就是使用它生成随机数</p><p>从 Go v1.20 开始，globalRand 已经改变为使用随机种子。</p><p>参看 Release notes https://go.dev/doc/go1.2 0</p><p>如果想使用旧版 globalRand 的行为，可以手动设定种子源 rand.Seed(1)或使用环境变量 os.Setenv(&quot;GODEBUG&quot;, &quot;randautoseed=0&quot;)</p>`,212)]))}const r=s(i,[["render",c],["__file","基础语法.html.vue"]]),d=JSON.parse('{"path":"/go/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html","title":"基础语法","lang":"zh-CN","frontmatter":{"typora-root-url":"..\\\\images"},"headers":[{"level":2,"title":"1.注释","slug":"_1-注释","link":"#_1-注释","children":[]},{"level":2,"title":"2.分割","slug":"_2-分割","link":"#_2-分割","children":[]},{"level":2,"title":"3.命名规范","slug":"_3-命名规范","link":"#_3-命名规范","children":[]},{"level":2,"title":"4.关键字","slug":"_4-关键字","link":"#_4-关键字","children":[]},{"level":2,"title":"5.预定义标识符","slug":"_5-预定义标识符","link":"#_5-预定义标识符","children":[]},{"level":2,"title":"6.标识符","slug":"_6-标识符","link":"#_6-标识符","children":[{"level":3,"title":"6.1 标识符建议：","slug":"_6-1-标识符建议","link":"#_6-1-标识符建议","children":[]}]},{"level":2,"title":"7.字面常量","slug":"_7-字面常量","link":"#_7-字面常量","children":[]},{"level":2,"title":"8.常量","slug":"_8-常量","link":"#_8-常量","children":[{"level":3,"title":"8.1 iota","slug":"_8-1-iota","link":"#_8-1-iota","children":[]}]},{"level":2,"title":"9.变量赋值","slug":"_9-变量赋值","link":"#_9-变量赋值","children":[{"level":3,"title":"9.1 下划线","slug":"_9-1-下划线","link":"#_9-1-下划线","children":[]},{"level":3,"title":"9.2 短格式","slug":"_9-2-短格式","link":"#_9-2-短格式","children":[]},{"level":3,"title":"9.3 零值","slug":"_9-3-零值","link":"#_9-3-零值","children":[]},{"level":3,"title":"9.4 标识符本质","slug":"_9-4-标识符本质","link":"#_9-4-标识符本质","children":[]}]},{"level":2,"title":"10.变量可见性","slug":"_10-变量可见性","link":"#_10-变量可见性","children":[{"level":3,"title":"10.1 包级标识符","slug":"_10-1-包级标识符","link":"#_10-1-包级标识符","children":[]},{"level":3,"title":"10.2 局部标识符","slug":"_10-2-局部标识符","link":"#_10-2-局部标识符","children":[]}]},{"level":2,"title":"11.类型","slug":"_11-类型","link":"#_11-类型","children":[{"level":3,"title":"11.1 布尔型","slug":"_11-1-布尔型","link":"#_11-1-布尔型","children":[]},{"level":3,"title":"11.2 数值型","slug":"_11-2-数值型","link":"#_11-2-数值型","children":[]},{"level":3,"title":"11.3 字符串","slug":"_11-3-字符串","link":"#_11-3-字符串","children":[]}]},{"level":2,"title":"12.操作符","slug":"_12-操作符","link":"#_12-操作符","children":[{"level":3,"title":"12.1 逻辑运算真值表","slug":"_12-1-逻辑运算真值表","link":"#_12-1-逻辑运算真值表","children":[]},{"level":3,"title":"12.2 算术运算符","slug":"_12-2-算术运算符","link":"#_12-2-算术运算符","children":[]},{"level":3,"title":"12.3 常量计算问题","slug":"_12-3-常量计算问题","link":"#_12-3-常量计算问题","children":[]},{"level":3,"title":"12.4 位运算符","slug":"_12-4-位运算符","link":"#_12-4-位运算符","children":[]},{"level":3,"title":"12.5 赋值运算符","slug":"_12-5-赋值运算符","link":"#_12-5-赋值运算符","children":[]},{"level":3,"title":"12.6 逻辑运算符","slug":"_12-6-逻辑运算符","link":"#_12-6-逻辑运算符","children":[]},{"level":3,"title":"12.7 三元运算符【注意】","slug":"_12-7-三元运算符【注意】","link":"#_12-7-三元运算符【注意】","children":[]},{"level":3,"title":"12.8 指针","slug":"_12-8-指针","link":"#_12-8-指针","children":[]},{"level":3,"title":"12.9 优先级","slug":"_12-9-优先级","link":"#_12-9-优先级","children":[]}]},{"level":2,"title":"13.程序控制","slug":"_13-程序控制","link":"#_13-程序控制","children":[{"level":3,"title":"13.1 if 语句","slug":"_13-1-if-语句","link":"#_13-1-if-语句","children":[]},{"level":3,"title":"13.2 switch 语句","slug":"_13-2-switch-语句","link":"#_13-2-switch-语句","children":[]},{"level":3,"title":"13.3 for 循环","slug":"_13-3-for-循环","link":"#_13-3-for-循环","children":[]},{"level":3,"title":"13.3.1 break","slug":"_13-3-1-break","link":"#_13-3-1-break","children":[]},{"level":3,"title":"13.4 goto 和 label","slug":"_13-4-goto-和-label","link":"#_13-4-goto-和-label","children":[]},{"level":3,"title":"13.5 for range","slug":"_13-5-for-range","link":"#_13-5-for-range","children":[]}]},{"level":2,"title":"14.随机数","slug":"_14-随机数","link":"#_14-随机数","children":[]}],"git":{"updatedTime":1746003719000,"contributors":[{"name":"changfutao","username":"changfutao","email":"changfutao@126.com","commits":4,"url":"https://github.com/changfutao"}]},"filePathRelative":"go/基础语法.md"}');export{r as comp,d as data};
